{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\projetos\\\\podcastrnext\\\\src\\\\contexts\\\\PlayerContexts.tsx\";\nimport { createContext, useState, useContext } from 'react';\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeindex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeindex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeindex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    const nextEpisodeIndex = currentEpisodeIndex + 1;\n\n    if (hasPrevious) {\n      setCurrentEpisodeindex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (currentEpisodeIndex > 0) {\n      setCurrentEpisodeindex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      playList,\n      isPlaying,\n      togglePlay,\n      playNext,\n      playPrevious,\n      setPlayingState,\n      hasPrevious,\n      hasNext\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 7\n  }, this);\n}\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n};","map":{"version":3,"sources":["C:/Users/Gabriel/Desktop/projetos/podcastrnext/src/contexts/PlayerContexts.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeindex","isPlaying","setIsPlaying","play","episode","playList","list","index","togglePlay","setPlayingState","state","hasPrevious","hasNext","length","playNext","nextEpisodeIndex","playPrevious","usePlayer"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAA6CC,UAA7C,QAA+D,OAA/D;AAyBA,OAAO,MAAMC,aAAa,gBAAGH,aAAa,CAAC,EAAD,CAAnC;AAMP,OAAO,SAASI,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAAwE;AAE3E,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACO,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDR,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAACS,SAAD;AAAA,OAAYC;AAAZ,MAA4BV,QAAQ,CAAC,KAAD,CAA1C;;AAEF,WAASW,IAAT,CAAcC,OAAd,EAAgC;AAC9BN,IAAAA,cAAc,CAAC,CAACM,OAAD,CAAD,CAAd;AACAJ,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASG,QAAT,CAAkBC,IAAlB,EAAmCC,KAAnC,EAAkD;AAChDT,IAAAA,cAAc,CAACQ,IAAD,CAAd;AACAN,IAAAA,sBAAsB,CAACO,KAAD,CAAtB;AACAL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASM,UAAT,GAAuB;AACrBN,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASQ,eAAT,CAAyBC,KAAzB,EAAyC;AACvCR,IAAAA,YAAY,CAACQ,KAAD,CAAZ;AACD;;AAED,QAAMC,WAAW,GAAGZ,mBAAmB,GAAG,CAA1C;AACA,QAAMa,OAAO,GAAIb,mBAAmB,GAAG,CAAvB,GAA4BF,WAAW,CAACgB,MAAxD;;AAEA,WAASC,QAAT,GAAqB;AACjB,UAAMC,gBAAgB,GAAGhB,mBAAmB,GAAG,CAA/C;;AAEA,QAAKY,WAAL,EAAkB;AAChBX,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AACN;;AAED,WAASiB,YAAT,GAAwB;AACpB,QAAIjB,mBAAmB,GAAG,CAA1B,EAA6B;AACzBC,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACH;AACJ;;AAEC,sBACI,QAAC,aAAD,CAAe,QAAf;AACA,IAAA,KAAK,EAAE;AACHF,MAAAA,WADG;AAEHE,MAAAA,mBAFG;AAGHI,MAAAA,IAHG;AAIHE,MAAAA,QAJG;AAKHJ,MAAAA,SALG;AAMHO,MAAAA,UANG;AAOHM,MAAAA,QAPG;AAQHE,MAAAA,YARG;AASHP,MAAAA,eATG;AAUHE,MAAAA,WAVG;AAWHC,MAAAA;AAXG,KADP;AAAA,cAeKhB;AAfL;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBD;AAED,OAAO,MAAMqB,SAAS,GAAG,MAAM;AAC3B,SAAOxB,UAAU,CAACC,aAAD,CAAjB;AACH,CAFM","sourcesContent":["import { createContext, useState, ReactNode, useContext } from 'react';\r\n\r\n\r\ntype Episode = {\r\n    title: string;\r\n    members: string;\r\n    thumbnail: string;\r\n    duration: number;\r\n    url: string;\r\n}\r\n\r\ntype PlayerContextData = {\r\n    episodeList: Episode[];\r\n    currentEpisodeIndex: number;\r\n    isPlaying: boolean;\r\n    play: (episode: Episode) => void;\r\n    togglePlay: () => void;\r\n    setPlayingState: (state: boolean) => void;\r\n    playList: (list: Episode[], index: number) => void;\r\n    playNext: () => void;\r\n    playPrevious: () => void;\r\n    hasNext: boolean;\r\n    hasPrevious: boolean;\r\n};\r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData);\r\n\r\ntype PlayerContextProviderProps = {\r\n    children: ReactNode;\r\n}\r\n\r\nexport function PlayerContextProvider({ children}: PlayerContextProviderProps) {\r\n\r\n    const [episodeList, setEpisodeList] = useState([]);\r\n    const [currentEpisodeIndex, setCurrentEpisodeindex] = useState(0);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  function play(episode: Episode) {\r\n    setEpisodeList([episode]);\r\n    setCurrentEpisodeindex(0);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function playList(list: Episode[], index: number) {\r\n    setEpisodeList(list);\r\n    setCurrentEpisodeindex(index);\r\n    setIsPlaying(true);  \r\n  }\r\n\r\n  function togglePlay () {\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  function setPlayingState(state: boolean) {\r\n    setIsPlaying(state);\r\n  }\r\n\r\n  const hasPrevious = currentEpisodeIndex > 0;\r\n  const hasNext = (currentEpisodeIndex + 1) < episodeList.length\r\n\r\n  function playNext () {\r\n      const nextEpisodeIndex = currentEpisodeIndex + 1;\r\n\r\n      if ( hasPrevious) {\r\n        setCurrentEpisodeindex(currentEpisodeIndex + 1);\r\n      }\r\n}\r\n\r\nfunction playPrevious() {\r\n    if (currentEpisodeIndex > 0) {\r\n        setCurrentEpisodeindex(currentEpisodeIndex - 1);\r\n    }\r\n}\r\n  \r\n  return (\r\n      <PlayerContext.Provider \r\n      value={{\r\n          episodeList, \r\n          currentEpisodeIndex, \r\n          play,\r\n          playList,\r\n          isPlaying, \r\n          togglePlay,\r\n          playNext,\r\n          playPrevious, \r\n          setPlayingState,\r\n          hasPrevious,\r\n          hasNext\r\n          }}\r\n          >\r\n          {children}\r\n      </PlayerContext.Provider>\r\n  )\r\n}\r\n\r\nexport const usePlayer = () => {\r\n    return useContext(PlayerContext);\r\n}"]},"metadata":{},"sourceType":"module"}