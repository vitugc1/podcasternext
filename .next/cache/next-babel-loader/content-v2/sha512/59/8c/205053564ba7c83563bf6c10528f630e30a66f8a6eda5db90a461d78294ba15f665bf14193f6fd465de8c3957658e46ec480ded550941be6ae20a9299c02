{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\projetos\\\\podcastrnext\\\\src\\\\contexts\\\\PlayerContexts.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState, useContext } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeindex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeindex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeindex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  var hasPrevious = currentEpisodeIndex > 0;\n  var hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    var nextEpisodeIndex = currentEpisodeIndex + 1;\n\n    if (hasPrevious) {\n      setCurrentEpisodeindex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (currentEpisodeIndex > 0) {\n      setCurrentEpisodeindex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      playList: playList,\n      isPlaying: isPlaying,\n      togglePlay: togglePlay,\n      playNext: playNext,\n      playPrevious: playPrevious,\n      setPlayingState: setPlayingState,\n      hasPrevious: hasPrevious,\n      hasNext: hasNext\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 7\n  }, this);\n}\n\n_s(PlayerContextProvider, \"/OaTRvPYiIkM/LmhSNt0VkpSQJY=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["C:/Users/Gabriel/Desktop/projetos/podcastrnext/src/contexts/PlayerContexts.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeindex","isPlaying","setIsPlaying","play","episode","playList","list","index","togglePlay","setPlayingState","state","hasPrevious","hasNext","length","playNext","nextEpisodeIndex","playPrevious","usePlayer"],"mappings":";;;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAA6CC,UAA7C,QAA+D,OAA/D;AAyBA,OAAO,IAAMC,aAAa,gBAAGH,aAAa,CAAC,EAAD,CAAnC;AAMP,OAAO,SAASI,qBAAT,OAAwE;AAAA;;AAAA,MAAvCC,QAAuC,QAAvCA,QAAuC;;AAAA,kBAErCJ,QAAQ,CAAC,EAAD,CAF6B;AAAA,MAEpEK,WAFoE;AAAA,MAEvDC,cAFuD;;AAAA,mBAGrBN,QAAQ,CAAC,CAAD,CAHa;AAAA,MAGpEO,mBAHoE;AAAA,MAG/CC,sBAH+C;;AAAA,mBAIzCR,QAAQ,CAAC,KAAD,CAJiC;AAAA,MAIpES,SAJoE;AAAA,MAIzDC,YAJyD;;AAM7E,WAASC,IAAT,CAAcC,OAAd,EAAgC;AAC9BN,IAAAA,cAAc,CAAC,CAACM,OAAD,CAAD,CAAd;AACAJ,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASG,QAAT,CAAkBC,IAAlB,EAAmCC,KAAnC,EAAkD;AAChDT,IAAAA,cAAc,CAACQ,IAAD,CAAd;AACAN,IAAAA,sBAAsB,CAACO,KAAD,CAAtB;AACAL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASM,UAAT,GAAuB;AACrBN,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASQ,eAAT,CAAyBC,KAAzB,EAAyC;AACvCR,IAAAA,YAAY,CAACQ,KAAD,CAAZ;AACD;;AAED,MAAMC,WAAW,GAAGZ,mBAAmB,GAAG,CAA1C;AACA,MAAMa,OAAO,GAAIb,mBAAmB,GAAG,CAAvB,GAA4BF,WAAW,CAACgB,MAAxD;;AAEA,WAASC,QAAT,GAAqB;AACjB,QAAMC,gBAAgB,GAAGhB,mBAAmB,GAAG,CAA/C;;AAEA,QAAKY,WAAL,EAAkB;AAChBX,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AACN;;AAED,WAASiB,YAAT,GAAwB;AACpB,QAAIjB,mBAAmB,GAAG,CAA1B,EAA6B;AACzBC,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACH;AACJ;;AAEC,sBACI,QAAC,aAAD,CAAe,QAAf;AACA,IAAA,KAAK,EAAE;AACHF,MAAAA,WAAW,EAAXA,WADG;AAEHE,MAAAA,mBAAmB,EAAnBA,mBAFG;AAGHI,MAAAA,IAAI,EAAJA,IAHG;AAIHE,MAAAA,QAAQ,EAARA,QAJG;AAKHJ,MAAAA,SAAS,EAATA,SALG;AAMHO,MAAAA,UAAU,EAAVA,UANG;AAOHM,MAAAA,QAAQ,EAARA,QAPG;AAQHE,MAAAA,YAAY,EAAZA,YARG;AASHP,MAAAA,eAAe,EAAfA,eATG;AAUHE,MAAAA,WAAW,EAAXA,WAVG;AAWHC,MAAAA,OAAO,EAAPA;AAXG,KADP;AAAA,cAeKhB;AAfL;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBD;;GA9DeD,qB;;KAAAA,qB;AAgEhB,OAAO,IAAMsB,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AAC3B,SAAOxB,UAAU,CAACC,aAAD,CAAjB;AACH,CAFM;;IAAMuB,S","sourcesContent":["import { createContext, useState, ReactNode, useContext } from 'react';\r\n\r\n\r\ntype Episode = {\r\n    title: string;\r\n    members: string;\r\n    thumbnail: string;\r\n    duration: number;\r\n    url: string;\r\n}\r\n\r\ntype PlayerContextData = {\r\n    episodeList: Episode[];\r\n    currentEpisodeIndex: number;\r\n    isPlaying: boolean;\r\n    play: (episode: Episode) => void;\r\n    togglePlay: () => void;\r\n    setPlayingState: (state: boolean) => void;\r\n    playList: (list: Episode[], index: number) => void;\r\n    playNext: () => void;\r\n    playPrevious: () => void;\r\n    hasNext: boolean;\r\n    hasPrevious: boolean;\r\n};\r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData);\r\n\r\ntype PlayerContextProviderProps = {\r\n    children: ReactNode;\r\n}\r\n\r\nexport function PlayerContextProvider({ children}: PlayerContextProviderProps) {\r\n\r\n    const [episodeList, setEpisodeList] = useState([]);\r\n    const [currentEpisodeIndex, setCurrentEpisodeindex] = useState(0);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  function play(episode: Episode) {\r\n    setEpisodeList([episode]);\r\n    setCurrentEpisodeindex(0);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function playList(list: Episode[], index: number) {\r\n    setEpisodeList(list);\r\n    setCurrentEpisodeindex(index);\r\n    setIsPlaying(true);  \r\n  }\r\n\r\n  function togglePlay () {\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  function setPlayingState(state: boolean) {\r\n    setIsPlaying(state);\r\n  }\r\n\r\n  const hasPrevious = currentEpisodeIndex > 0;\r\n  const hasNext = (currentEpisodeIndex + 1) < episodeList.length\r\n\r\n  function playNext () {\r\n      const nextEpisodeIndex = currentEpisodeIndex + 1;\r\n\r\n      if ( hasPrevious) {\r\n        setCurrentEpisodeindex(currentEpisodeIndex + 1);\r\n      }\r\n}\r\n\r\nfunction playPrevious() {\r\n    if (currentEpisodeIndex > 0) {\r\n        setCurrentEpisodeindex(currentEpisodeIndex - 1);\r\n    }\r\n}\r\n  \r\n  return (\r\n      <PlayerContext.Provider \r\n      value={{\r\n          episodeList, \r\n          currentEpisodeIndex, \r\n          play,\r\n          playList,\r\n          isPlaying, \r\n          togglePlay,\r\n          playNext,\r\n          playPrevious, \r\n          setPlayingState,\r\n          hasPrevious,\r\n          hasNext\r\n          }}\r\n          >\r\n          {children}\r\n      </PlayerContext.Provider>\r\n  )\r\n}\r\n\r\nexport const usePlayer = () => {\r\n    return useContext(PlayerContext);\r\n}"]},"metadata":{},"sourceType":"module"}