{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\projetos\\\\podcastrnext\\\\src\\\\contexts\\\\PlayerContexts.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState, useContext } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeindex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  var _useState5 = useState(false),\n      isShuffling = _useState5[0],\n      setIsShuffling = _useState5[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeindex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeindex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  function clearPlayerState() {\n    setEpisodeList([]);\n    setCurrentEpisodeindex(0);\n  }\n\n  var hasPrevious = currentEpisodeIndex > 0;\n  var hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      var nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeindex(nextRandomEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeindex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (currentEpisodeIndex > 0) {\n      setCurrentEpisodeindex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      playList: playList,\n      isPlaying: isPlaying,\n      togglePlay: togglePlay,\n      playNext: playNext,\n      playPrevious: playPrevious,\n      setPlayingState: setPlayingState,\n      hasPrevious: hasPrevious,\n      hasNext: hasNext,\n      isLooping: isLooping,\n      toggleLoop: toggleLoop,\n      toggleShuffle: toggleShuffle,\n      isShuffling: isShuffling,\n      clearPlayerState: clearPlayerState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 7\n  }, this);\n}\n\n_s(PlayerContextProvider, \"na43b0WjZ2UcR9usaN5Aatp3P0o=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["C:/Users/Gabriel/Desktop/projetos/podcastrnext/src/contexts/PlayerContexts.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeindex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","clearPlayerState","hasPrevious","hasNext","length","playNext","nextRandomEpisodeIndex","Math","floor","random","playPrevious","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useContext } from 'react';\r\n\r\n\r\ntype Episode = {\r\n  id: string;\r\n  title: string;\r\n  thumbnail: string;\r\n  members: string;\r\n  duration: number;\r\n  durationAsString: string;\r\n  url: string;\r\n  publishedAt: string;\r\n}\r\n\r\ntype PlayerContextData = {\r\n    episodeList: Episode[];\r\n    currentEpisodeIndex: number;\r\n    isPlaying: boolean;\r\n    isLooping: boolean;\r\n    isShuffling: boolean;\r\n    play: (episode: Episode) => void;\r\n    togglePlay: () => void;\r\n    toggleLoop: () => void;\r\n    toggleShuffle: () => void;\r\n    setPlayingState: (state: boolean) => void;\r\n    playList: (list: Episode[], index: number) => void;\r\n    playNext: () => void;\r\n    playPrevious: () => void;\r\n    clearPlayerState:() => void;\r\n    hasNext: boolean;\r\n    hasPrevious: boolean;\r\n};\r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData);\r\n\r\ntype PlayerContextProviderProps = {\r\n    children: ReactNode;\r\n}\r\n\r\nexport function PlayerContextProvider({ children}: PlayerContextProviderProps) {\r\n\r\n    const [episodeList, setEpisodeList] = useState([]);\r\n    const [currentEpisodeIndex, setCurrentEpisodeindex] = useState(0);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [isLooping, setIsLooping] = useState(false);\r\n    const [isShuffling, setIsShuffling] = useState(false);\r\n\r\n  function play(episode: Episode) {\r\n    setEpisodeList([episode]);\r\n    setCurrentEpisodeindex(0);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function playList(list: Episode[], index: number) {\r\n    setEpisodeList(list);\r\n    setCurrentEpisodeindex(index);\r\n    setIsPlaying(true);  \r\n  }\r\n\r\n  function togglePlay () {\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n  function toggleLoop () {\r\n    setIsLooping(!isLooping);\r\n  }\r\n  function toggleShuffle () {\r\n    setIsShuffling(!isShuffling);\r\n  }\r\n  \r\n  function setPlayingState(state: boolean) {\r\n    setIsPlaying(state);\r\n  }\r\n\r\n  function clearPlayerState() {\r\n    setEpisodeList([]);\r\n    setCurrentEpisodeindex(0);\r\n  }\r\n\r\n  const hasPrevious = currentEpisodeIndex > 0;\r\n  const hasNext = isShuffling || (currentEpisodeIndex + 1) < episodeList.length\r\n\r\n  function playNext () {\r\n      if (isShuffling){\r\n      const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length)\r\n      setCurrentEpisodeindex(nextRandomEpisodeIndex);\r\n      }else if (hasNext) {\r\n        setCurrentEpisodeindex(currentEpisodeIndex + 1);\r\n    }\r\n}\r\n\r\n\r\nfunction playPrevious() {\r\n    if (currentEpisodeIndex > 0) {\r\n        setCurrentEpisodeindex(currentEpisodeIndex - 1);\r\n    }\r\n}\r\n  \r\n  return (\r\n      <PlayerContext.Provider \r\n      value={{\r\n          episodeList, \r\n          currentEpisodeIndex, \r\n          play,\r\n          playList,\r\n          isPlaying, \r\n          togglePlay,\r\n          playNext,\r\n          playPrevious, \r\n          setPlayingState,\r\n          hasPrevious,\r\n          hasNext,\r\n          isLooping,\r\n          toggleLoop,\r\n          toggleShuffle,\r\n          isShuffling,\r\n          clearPlayerState\r\n          }}\r\n          >\r\n          {children}\r\n      </PlayerContext.Provider>\r\n  )\r\n}\r\n\r\nexport const usePlayer = () => {\r\n    return useContext(PlayerContext);\r\n}"]},"metadata":{},"sourceType":"module"}