{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\projetos\\\\podcastrnext\\\\src\\\\contexts\\\\PlayerContexts.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      correntEpisodeIndex = _useState2[0],\n      setCurrentEpisodeindex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeindex(0);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      correntEpisodeIndex: correntEpisodeIndex,\n      play: play,\n      isPlaying: isPlaying,\n      togglePlay: togglePlay,\n      setPlayingState: setPlayingState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 7\n  }, this);\n}\n\n_s(PlayerContextProvider, \"1ox4HfKFWxPoO0S/o9Jg9iXl27g=\");\n\n_c = PlayerContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["C:/Users/Gabriel/Desktop/projetos/podcastrnext/src/contexts/PlayerContexts.tsx"],"names":["createContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","correntEpisodeIndex","setCurrentEpisodeindex","isPlaying","setIsPlaying","play","episode","togglePlay","setPlayingState","state"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AAoBA,OAAO,IAAMC,aAAa,gBAAGF,aAAa,CAAC,EAAD,CAAnC;AAMP,OAAO,SAASG,qBAAT,OAAwE;AAAA;;AAAA,MAAvCC,QAAuC,QAAvCA,QAAuC;;AAAA,kBAErCH,QAAQ,CAAC,EAAD,CAF6B;AAAA,MAEpEI,WAFoE;AAAA,MAEvDC,cAFuD;;AAAA,mBAGrBL,QAAQ,CAAC,CAAD,CAHa;AAAA,MAGpEM,mBAHoE;AAAA,MAG/CC,sBAH+C;;AAAA,mBAIzCP,QAAQ,CAAC,KAAD,CAJiC;AAAA,MAIpEQ,SAJoE;AAAA,MAIzDC,YAJyD;;AAM7E,WAASC,IAAT,CAAcC,OAAd,EAAgC;AAC9BN,IAAAA,cAAc,CAAC,CAACM,OAAD,CAAD,CAAd;AACAJ,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASG,UAAT,GAAuB;AACrBH,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASK,eAAT,CAAyBC,KAAzB,EAAyC;AACvCL,IAAAA,YAAY,CAACK,KAAD,CAAZ;AACD;;AAED,sBACI,QAAC,aAAD,CAAe,QAAf;AACA,IAAA,KAAK,EAAE;AACHV,MAAAA,WAAW,EAAXA,WADG;AAEHE,MAAAA,mBAAmB,EAAnBA,mBAFG;AAGHI,MAAAA,IAAI,EAAJA,IAHG;AAGGF,MAAAA,SAAS,EAATA,SAHH;AAIHI,MAAAA,UAAU,EAAVA,UAJG;AAKHC,MAAAA,eAAe,EAAfA;AALG,KADP;AAAA,cASKV;AATL;AAAA;AAAA;AAAA;AAAA,UADJ;AAaD;;GAjCeD,qB;;KAAAA,qB","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\r\n\r\n\r\ntype Episode = {\r\n    title: string;\r\n    members: string;\r\n    thumbnail: string;\r\n    duration: number;\r\n    url: string;\r\n}\r\n\r\ntype PlayerContextData = {\r\n    episodeList: Episode[];\r\n    correntEpisodeIndex: number;\r\n    isPlaying: boolean;\r\n    play: (episode: Episode) => void;\r\n    togglePlay: () => void;\r\n    setPlayingState: (state: boolean) => void;\r\n};\r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData);\r\n\r\ntype PlayerContextProviderProps = {\r\n    children: ReactNode;\r\n}\r\n\r\nexport function PlayerContextProvider({ children}: PlayerContextProviderProps) {\r\n\r\n    const [episodeList, setEpisodeList] = useState([]);\r\n    const [correntEpisodeIndex, setCurrentEpisodeindex] = useState(0);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  function play(episode: Episode) {\r\n    setEpisodeList([episode]);\r\n    setCurrentEpisodeindex(0);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function togglePlay () {\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  function setPlayingState(state: boolean) {\r\n    setIsPlaying(state);\r\n  }\r\n  \r\n  return (\r\n      <PlayerContext.Provider \r\n      value={{\r\n          episodeList, \r\n          correntEpisodeIndex, \r\n          play, isPlaying, \r\n          togglePlay, \r\n          setPlayingState\r\n          }}\r\n          >\r\n          {children}\r\n      </PlayerContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}